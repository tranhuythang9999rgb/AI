# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pb_pb2 as pb__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pb_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AIServiceStub(object):
    """gRPC Service that the Gateway (Golang) will call
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessAIRequest = channel.unary_unary(
                '/aipool.AIService/ProcessAIRequest',
                request_serializer=pb__pb2.AIRequest.SerializeToString,
                response_deserializer=pb__pb2.AIResponse.FromString,
                _registered_method=True)
        self.QueryDatabase = channel.unary_unary(
                '/aipool.AIService/QueryDatabase',
                request_serializer=pb__pb2.DatabaseQuery.SerializeToString,
                response_deserializer=pb__pb2.DatabaseResult.FromString,
                _registered_method=True)


class AIServiceServicer(object):
    """gRPC Service that the Gateway (Golang) will call
    """

    def ProcessAIRequest(self, request, context):
        """AI Service will receive training/prediction requests from Gateway
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryDatabase(self, request, context):
        """AI Service can query the database through this RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessAIRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessAIRequest,
                    request_deserializer=pb__pb2.AIRequest.FromString,
                    response_serializer=pb__pb2.AIResponse.SerializeToString,
            ),
            'QueryDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryDatabase,
                    request_deserializer=pb__pb2.DatabaseQuery.FromString,
                    response_serializer=pb__pb2.DatabaseResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aipool.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aipool.AIService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """gRPC Service that the Gateway (Golang) will call
    """

    @staticmethod
    def ProcessAIRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aipool.AIService/ProcessAIRequest',
            pb__pb2.AIRequest.SerializeToString,
            pb__pb2.AIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aipool.AIService/QueryDatabase',
            pb__pb2.DatabaseQuery.SerializeToString,
            pb__pb2.DatabaseResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AIGatewayServiceStub(object):
    """gRPC service for the Gateway (Golang)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ForwardAIRequest = channel.unary_unary(
                '/aipool.AIGatewayService/ForwardAIRequest',
                request_serializer=pb__pb2.AIRequest.SerializeToString,
                response_deserializer=pb__pb2.AIResponse.FromString,
                _registered_method=True)


class AIGatewayServiceServicer(object):
    """gRPC service for the Gateway (Golang)
    """

    def ForwardAIRequest(self, request, context):
        """Gateway will receive AI requests from ReactJS client via WebSocket and pass to AIService
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIGatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ForwardAIRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ForwardAIRequest,
                    request_deserializer=pb__pb2.AIRequest.FromString,
                    response_serializer=pb__pb2.AIResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aipool.AIGatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('aipool.AIGatewayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIGatewayService(object):
    """gRPC service for the Gateway (Golang)
    """

    @staticmethod
    def ForwardAIRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/aipool.AIGatewayService/ForwardAIRequest',
            pb__pb2.AIRequest.SerializeToString,
            pb__pb2.AIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
